using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SerialTest
{
    class Program
    {
        static void Main()
        {
            /*
            The focus of this test is the frequency of all possible overlapping m-bit patterns across the entire
sequence. The purpose of this test is to determine whether the number of occurrences of the 2m m-bit
overlapping patterns is approximately the same as would be expected for a random sequence. Random
sequences have uniformity; that is, every m-bit pattern has the same chance of appearing as every other
m-bit pattern. Note that for m = 1, the Serial test is equivalent to the Frequency test of Section 2.1. 

            input : input sequence ( string type ) ( epsilonInput ) that we want to test
                    input m (int type). The length in bits of the bit string. 

            output : 2 output 2 P-Values that will help us to decide the sequence is random or not
    */
            ClassTakeInputs.MethodTakeInputs();
            return;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SerialTest
{
    class ClassTakeInputs
    {
        public static void MethodTakeInputs()
        {
            string epsilonInput = "0011011101";         //input sequence
            int n = epsilonInput.Length;                                 //inputsize
            int m = 3;      

            List<int> inputList = new List<int>();
            for (int i = 0; i < n; i++)                                 // this for convert string input (a collection of 1 and 0) to List
            {
                if (epsilonInput[i] == '1')
                    inputList.Add(1);
                else if (epsilonInput[i] == '0')
                    inputList.Add(0);
                else
                    Console.WriteLine("Wrong input data, input sequence have to be collection of 1 and 0 ");
            }

            ClassProcess.MethodProcess(inputList, m ,n);

            return;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SerialTest
{
    class ClassProcess
    {
        public static void MethodProcess(List<int> inputList, int m , int n)
        {

            List<int> frequencyListThree = new List<int>();                       // This list hold the frequencies of  all possible overlapping m-bit blocks
            List<int> frequencyListTwo = new List<int>();                       // This list hold the frequencies of  all possible overlapping m-1-bit blocks
            List<int> frequencyListOne = new List<int>();                  // This list hold the frequencies of  all possible overlapping m-2-bit blocks
            int index;
           

            if( m >= 3)
            {
                for (int j = 0; j < m - 1; j++)                         // this for extend input sequence accordşng to the m value
                    inputList.Add(inputList[j]);
               
                frequencyListThree = ClassCalculateFrequency.MethodCalculateFrequency(inputList, m);
                index = inputList.Count;
                inputList.RemoveAt(index - 1);
                frequencyListTwo = ClassCalculateFrequency.MethodCalculateFrequency(inputList, m-1);
                index = inputList.Count;
                inputList.RemoveAt(index - 1);
                frequencyListOne = ClassCalculateFrequency.MethodCalculateFrequency(inputList, m-2);
            }
            if (m == 2)
            {
                for (int j = 0; j < m - 2; j++)                         // this for extend input sequence accordşng to the m value
                    inputList.Add(inputList[j]);
                frequencyListThree = ClassCalculateFrequency.MethodCalculateFrequency(inputList, m);
                index = inputList.Count;
                inputList.RemoveAt(index - 1);
                frequencyListTwo = ClassCalculateFrequency.MethodCalculateFrequency(inputList, m-1);
            }
            if( m == 1 )
            {
                frequencyListThree = ClassCalculateFrequency.MethodCalculateFrequency(inputList, m);
            }

            double deltaM = 0;
            double deltaMminus1 = 0;
            double deltaMminus2 = 0;

            for( int a = 0 ; a < frequencyListThree.Count ; a++)
            {
                deltaM = deltaM + frequencyListThree[a] * frequencyListThree[a];
            }
            deltaM = deltaM * Math.Pow(2, (double)m) / (double)n - n; 

            for (int b = 0; b < frequencyListTwo.Count; b++)
            {
                deltaMminus1 = deltaMminus1 + frequencyListTwo[b] * frequencyListTwo[b];
            }
            deltaMminus1 = deltaMminus1 * Math.Pow(2, (double)(m-1)) / (double)n - n;
            for (int c = 0; c < frequencyListOne.Count ; c++)
            {
                deltaMminus2 = deltaMminus2 + frequencyListOne[c] * frequencyListOne[c];
            }
            deltaMminus2 = deltaMminus2 * Math.Pow(2, (double)(m - 2)) / (double)n - n;


            double deltaFirst, deltaSecond;
            deltaFirst = deltaM  - deltaMminus1;
            deltaSecond = deltaM - 2 * deltaMminus1  + deltaMminus2;



            // Let's start to calculate P-Value from gamma functions
            double pValue, pValue2, pValue3; 
            double gammaInput1 = Math.Pow(2, (double)m - 2);
            double gammaInput2 = deltaFirst / 2;

            pValue = ClassGamma.Gamma(gammaInput1);
            pValue3 = ClassLowerGamma.incgamma(gammaInput1, gammaInput2);
            pValue = (double)pValue3 / (double)pValue;                            // it is lower incomplete gamma value but we need upper incomplete gamma value.So take complement
            pValue = 1 - pValue;                            // now we calculated P-Value

            Console.WriteLine("P-Value1 is " + pValue);
            if (pValue < 0.01)
                Console.WriteLine("Since P-Value 1 is smaller than 0.01 then the sequence is not random");
            else
                Console.WriteLine("Since P-Value 1 is bigger than or equal to 0.01 then the sequence israndom");
            double gammaInput3 = Math.Pow(2, (double)m - 3);
            double gammaInput4 = deltaSecond / 2;
            pValue2 = ClassGamma.Gamma(gammaInput3);
            pValue3 = ClassLowerGamma.incgamma(gammaInput3, deltaSecond /2);
            pValue2 = (double)pValue3 / (double)pValue2;                            // it is lower incomplete gamma value but we need upper incomplete gamma value.So take complement
            pValue2 = 1 - pValue2;                            // now we calculated P-Value


            Console.WriteLine("P-Value2 is " + pValue2);
            if (pValue2 < 0.01)
                Console.WriteLine("Since P-Value 2 is smaller than 0.01 then the sequence is not random");
            else
                Console.WriteLine("Since P-Value 2 is bigger than or equal to 0.01 then the sequence is random");


            return;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SerialTest
{
    class ClassCalculateFrequency
    {
        public static List<int> MethodCalculateFrequency(List<int> inputList, int m)
        {
            List<int> inputList2 = new List<int>();
            List<int> frequencyList = new List<int>();
            int count ;

            for (int i = 0; i < inputList.Count; i++)
                inputList2.Add(inputList[i]);
            int maxValue = (int)Math.Pow(2, m) - 1 ;                               // it will store  max value of the m bit binary number


            int value ;                              // any m bit value in input list
            for(int x = 0 ; x<=maxValue ; x++)
            {
                count = 0;
                for (int k = 0; k <= inputList.Count - m; k++)
                {
                    value = 0;
                    for (int a = 0 ; a < m ; a++ )
                    {
                        value = value + (int)Math.Pow(2, m - 1 - a) * inputList2[k + a] ;                   
                    }
                    if (value == x)
                        count = count + 1;
                }
                frequencyList.Add(count+0);
            }
            
            return frequencyList;
        }
    }
}
