using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestStatisticRefDistribu
{
    /*
    The focus of this test is the number of occurrences of pre-specified target strings. The purpose of this
test is to detect generators that produce too many occurrences of a given non-periodic (aperiodic) pattern.
For this test and for the Overlapping Template Matching test of Section 2.8, an m-bit window is used to
search for a specific m-bit pattern. If the pattern is not found, the window slides one bit position. If the
pattern is found, the window is reset to the bit after the found pattern, and the search resumes. 

        input : (2 inputs). One of them is input sequence (epsilonInput)(sring type) that we want to test
                The other input is M (int type). The number of elemets that each block must have

        output : P-Value (double). it help us to decide the sequence is random or not.
    */
    class Program
    {
        static void Main()
        {
            ClassTakeInput.MethodTakeInput();
            return;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestStatisticRefDistribu
{
    class ClassTakeInput
    {
        public static void MethodTakeInput()
        {
            string epsilonInput = "10100100101110010110";                                   // input sequence that we want to test
            int n = epsilonInput.Length;                                                                 //  input sequence length (epsilonInut length)
            string B = "001";                                                          // it is the template that we will search in the blocks of epsilonInput string
            int m = B.Length;                        // The size of the template string

            int M = 10 ;                            // The size of the each  block
            int N = n / M ;                              //The number of the total block

            List<int> inputList = new List<int>();                      // This for loop help us record epsilonInput elements into a List
            for( int i = 0 ; i<n ; i++ )
            {
                if (epsilonInput[i] == '1')
                    inputList.Add(1);
                else if (epsilonInput[i] == '0')
                    inputList.Add(0);
                else
                    Console.WriteLine(" Wrong input !! input string must be collection of the ones and zeros");                
            }
            List<int> bList = new List<int>();              
            for( int j = 0 ; j < m  ; j++)                       // This for loop help us record string B elements into a List
            {
                if (B[j] == '1')
                    bList.Add(1);
                else if (B[j] == '0')
                    bList.Add(0);
                else
                    Console.WriteLine("Wrong input !! Template have to be a collection of ones and zeros");
            }         

            int decimalValueB = 0 ;
            for(int k = 0 ; k < m ; k++ )                       // it calculates the decimal value of binary number template
            {
                decimalValueB = decimalValueB + (int)Math.Pow(2, m - 1 - k) * bList[k] ;
            }

            ClassProcess.MethodProcess(inputList,decimalValueB,N,M,m);




            

            return;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestStatisticRefDistribu
{
    class ClassProcess
    {
        public static void MethodProcess(List<int> inputList, int decimalValueB, int N , int M , int m)
        {
            List<int> wList = new List<int>() ;                             // it will store the number of the template in each block
            int count ;
            int values;
            for(int i = 0 ; i<N ; i++ )
            {
                count = 0;
                for( int j = 0 ; j<M-m+1 ; j++ )
                {
                    values = 0;
                    for( int k = 0 ; k < m ; k++ )
                    {
                        values = values + (int)Math.Pow(2, m - 1 - k) * inputList[i * M + j + k];
                    }
                    if (values == decimalValueB)
                    {
                        count = count + 1;
                        j = j + m - 1;
                    }
                 
                }
                wList.Add(count);
            }
            double mean, variance;                  // Theorical mean and variances
            mean = (M - m + 1) / Math.Pow(2, (double)m);
            variance = (1 / Math.Pow(2, (double)m)) - ((2 * m - 1) / Math.Pow(2, (double)2 * m));           // two steps for calculating variance
            variance = variance * M;


            // Let calculte X^2 Obs

            double xSqrObs=0;
            for(int a = 0 ; a < N ; a++)
            {
                xSqrObs = xSqrObs + (wList[a] - mean) * (wList[a] - mean);
            }

            xSqrObs = xSqrObs / variance ;


            // Let's start to calculate P-Value from gamma functions
            double pValue, pValue2; ;

            pValue = ClassGamma.Gamma((double)N / 2);
            pValue2 = ClassLowerGamma.incgamma((double)N / 2, (double)xSqrObs / 2);

            pValue = (float)pValue2 / (float)pValue;                            // it is lower incomplete gamma value but we need upper incomplete gamma value.So take complement
            pValue = 1 - pValue;                            // now we calculated P-Value



            Console.WriteLine("P-Value is equal to   " + pValue);

            if (pValue >= 0.01)
            {
                Console.WriteLine("Since pValue is bigger than or equal to 0.01 , then the process is random");
            }
            else
                Console.WriteLine("Since pValue is smaller than 0.01 , then the process is not random");





            return;
        }
    }
}

