using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Cumulative_Sums__Cusum__Test
{
    /*
    The focus of this test is the maximal excursion (from zero) of the random walk defined by the cumulative
sum of adjusted (-1, +1) digits in the sequence. The purpose of the test is to determine whether the
cumulative sum of the partial sequences occurring in the tested sequence is too large or too small relative
to the expected behavior of that cumulative sum for random sequences. This cumulative sum may be
considered as a random walk. For a random sequence, the excursions of the random walk should be near
zero. For certain types of non-random sequences, the excursions of this random walk from zero will be
large. 
    
        input : input sequence (named epsilonInput) (string type) that we want to test.
                input mode (type int ) that decide the mode of the progrm. This code have two modes.

        output :P-Value is output that will help us to decide the input sequence is random or not

    */
    class Program
    {
        static void Main()
        {
            ClassTakingInputsandProcess.MethodTakingInputsandProcess();

            return;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Cumulative_Sums__Cusum__Test
{
    class ClassTakingInputsandProcess
    {
        public static void MethodTakingInputsandProcess()
        {
            string epsilonInput = "1011010111";         // input string
            int n = epsilonInput.Length;                                  // The length of the string
            int mode = 1;                                   // it decide the mode forwrd or backward
            List<int> sumList = new List<int>();                       // it will hold the consequtive sums
            int sum=0;                                       // it helps to record every sum to sumArray
            int i;  
            if(mode == 0)
            {
                for(i = 0 ; i<n ; i++ )
                {
                    if (epsilonInput[i] == '1')
                        sum = sum + 1;
                    else if (epsilonInput[i] == '0')
                        sum = sum - 1;
                    sumList.Add(sum);

                }
            }
            else if (mode == 1)
            {
                for (i = n-1; i >= 0 ; i--)
                {
                    if (epsilonInput[i] == '1')
                        sum = sum + 1;
                    else if (epsilonInput[i] == '0')
                        sum = sum - 1;
                    sumList.Add(sum);

                }
            }

            int maxValue;                   // these max and min represent the max and min value of the sumList
            int minValue;
            maxValue = sumList.Max();
            minValue = sumList.Min();
            int z = 0 ;                                  // it will hold the absolute max value in the list sumList
            if (Math.Abs(maxValue) < Math.Abs(minValue))
                z = Math.Abs(minValue);
            else if (Math.Abs(maxValue) > Math.Abs(minValue))
                z = Math.Abs(maxValue);
            double pValue = ClassComputePValue.MethodComputePValue(n, z);
            if(pValue >= 0.01 )
                Console.WriteLine("Since p-Value is bigger than 0.01  then process is random and p-Value is    "+pValue);
            if (pValue < 0.01)
                Console.WriteLine("Since p-Value is smaller than 0.01  then process is not random and p-Value is    " + pValue);


            return;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Cumulative_Sums__Cusum__Test
{
    class ClassComputePValue
    {
        public static double MethodComputePValue (int n , int z)
        {
            double result;
            double count = 0 , count1 = 0 , count2 = 0 , count3 = 0 , count4 =0 ;
            for(int  i = ((z-n) / z) / 4 ; i<= ((n - z) / z) / 4; i++)
            {
                count1 = count1 + ClassCDFCalculator.MethodCDFCalculator((4 * i + 1) * z / (Math.Sqrt(n)));
                count2 = count2 + ClassCDFCalculator.MethodCDFCalculator((4 * i - 1) * z / (Math.Sqrt(n)));
            }
            for (int i = ((-3*z - n) / z) / 4; i <= ((n - z) / z) / 4; i++)
            {
                count3 = count3 + ClassCDFCalculator.MethodCDFCalculator((4 * i + 3) * z / (Math.Sqrt(n)));
                count4 = count4 + ClassCDFCalculator.MethodCDFCalculator((4 * i + 1) * z / (Math.Sqrt(n)));
            }
            result = 1 - count1 + count2 + count3 - count4;
            Console.WriteLine("p-Value is     " + result);
            return result;
        }
    }
}

