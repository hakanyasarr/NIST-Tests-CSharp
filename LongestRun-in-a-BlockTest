using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Longest_Run_in_a_Block_Test
{
    /*
    The focus of the test is the longest run of ones within M-bit blocks. The purpose of this test is to
determine whether the length of the longest run of ones within the tested sequence is consistent with the
length of the longest run of ones that would be expected in a random sequence. Note that an irregularity in
the expected length of the longest run of ones implies that there is also an irregularity in the expected
length of the longest run of zeroes. 

        input : In this test, there is 1 input (epsilonInput) (type string) that we want to test for randomness. epsilonInput is a sequence that is consist ones and zeros.

        output : Output is P-Value. P-Value help us to determine the sequence is random or not.
                if P-Value is smaller than 0.01 , then the input sequence is not random. Otherwise, the sequence is random
     */
    class Program
    {
        static void Main()
        {
            ClassTakeandProcessInput.MethodTakeandProcessInput();
            return;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Longest_Run_in_a_Block_Test
{
    public class ClassTakeandProcessInput
    {
        public static void MethodTakeandProcessInput()
        {


            string epsilonInput = ("11001100000101010110110001001100111000000000001001001101010100010001001111010110100000001101011111001100111001101101100010110010");                          // input sequence epsilonInput (string type)

            int n = epsilonInput.Length;                                  // it is the input size. In other words, the total elements number in input sequence. The minimum must be 128

            int M;                                                    // The lengt of each block. The value of M will assign automotically depennd  on n(input size)
            if ((128 <= n) && (n < 6272))                               // This if else s determine the value of M based on value of n
                M = 8;
            else if ((6272 <= n) && (n < 750000))
                M = 128;
            else if (750000 <= n)
                M = 10000;
            else
            {
                Console.WriteLine("Wrong input !! The length of the input consist of minimum from 128 elementss");
                return;
            }

            List<int> inputList = new List<int>();          // This for loop transfer the elements of input sequence (epsilonInput) to the inputList as integer
            for (int i = 0; i < n; i++)
            {
                if (epsilonInput[i] == '1')
                    inputList.Add(1);
                else if (epsilonInput[i] == '0')
                    inputList.Add(0);
                else
                    Console.WriteLine("Unexpected input data input sequence have to be collection of one and zero");
            }

            int N = n / M;                                                            // The block number of the input sequence
            ClassProcess.MethodProcess(inputList, N, M);

            return;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Longest_Run_in_a_Block_Test
{

    // This class help us to calculate the frequencies of the max frequency ones of blocks
    class ClassProcess2
    {
        public static List<int> MethodProcess2(List<int> maxFrequencyList, int M, List<int> countList)
        {

            List<int> frequencyList = new List<int>();
            int count = 0;                          // the count will try to detect the mximum number of one (consecutive ones) for each block
            int range;

            int minFrequency = maxFrequencyList.Min();          // these max min values help us to bound maxFrequencyList to calculate frequencies. Actually , they are min and max values in maxFrequencyList
            int maxFrequency = maxFrequencyList.Max();

            for (int a = minFrequency; a <= maxFrequency; a++)          // Find all frequencies of maxFrequencyList. This for loop calculate the frequencies of elements in the maxFrequencyList and then record them to the frequencyList
            {
                for (;;)
                {
                    bool control = maxFrequencyList.Remove(a);
                    if (control == true)
                        count = count + 1;
                    else
                        break;
                }

                frequencyList.Add(count + 0);
                count = 0;
            }


            for (int z = minFrequency; z <= maxFrequency; z++)              // sorted elements from minFrequency to maxFrequency. 
                countList.Add(z);

            //Now we have elements at countList and their corresponding frequencies at frequencyList

  
            int element = 0;
            if (M == 8)
            {
                range = minFrequency - 1;
                for (; range > 0; range--)
                {
                    frequencyList.Reverse();
                    frequencyList.Add(0);
                    frequencyList.Reverse();
                    countList.Reverse();
                    countList.Add(range);
                    countList.Reverse();
                }
                range = 4 - maxFrequency;
                for (; range > 0; range--)
                {
                    frequencyList.Add(0);
                    countList.Add(5 - range);
                }

                for (;;)
                {
                    if (countList[0] <= 1)
                    {
                        element = frequencyList[0] + element;
                        frequencyList.RemoveAt(0);
                        countList.RemoveAt(0);
                    }

                    else
                        break;

                }
                frequencyList.Reverse();
                frequencyList.Add(element + 0);
                frequencyList.Reverse();
                countList.Reverse();
                countList.Add(1);
                countList.Reverse();

                element = 0;
                int index = 0;
                index = countList.Count - 1;
                for (; ; index--)
                {
                    if (index < 0)
                        break;
                    if (countList[index] >= 4)
                    {
                        element = element + frequencyList[index];
                        countList.RemoveAt(index);
                        frequencyList.RemoveAt(index);
                    }
                    else
                        break;

                }
                frequencyList.Add(element + 0);
                countList.Add(4);

            }






            if (M == 128)
            {
                range = minFrequency - 4;
                for (; range > 0; range--)
                {
                    frequencyList.Reverse();
                    frequencyList.Add(0);
                    frequencyList.Reverse();
                    countList.Reverse();
                    countList.Add(range + 3);
                    countList.Reverse();
                }
                range = 9 - maxFrequency;
                for (; range > 0; range--)
                {
                    frequencyList.Add(0);
                    countList.Add(10 - range);
                }


                for (;;)
                {
                    if (countList[0] <= 4)
                    {
                        element = frequencyList[0] + element;
                        frequencyList.RemoveAt(0);
                        countList.RemoveAt(0);
                    }

                    else
                        break;

                }
                frequencyList.Reverse();
                frequencyList.Add(element + 0);
                frequencyList.Reverse();
                countList.Reverse();
                countList.Add(4);
                countList.Reverse();

                element = 0;
                int index = 0;
                index = countList.Count - 1;
                for (; ; index--)
                {
                    if (index < 0)
                        break;
                    if (countList[index] >= 9)
                    {
                        element = element + frequencyList[index];
                        countList.RemoveAt(index);
                        frequencyList.RemoveAt(index);
                    }
                    else
                        break;

                }
                frequencyList.Add(element + 0);
                countList.Add(9);

            }






            if (M == 10000)
            {
                range = minFrequency - 10;
                for (; range > 0; range--)
                {
                    frequencyList.Reverse();
                    frequencyList.Add(0);
                    frequencyList.Reverse();
                    countList.Reverse();
                    countList.Add(range + 9);
                    countList.Reverse();
                }
                range = 16 - maxFrequency;
                for (; range > 0; range--)
                {
                    frequencyList.Add(0);
                    countList.Add(17 - range);
                }

                for (;;)
                {
                    if (countList[0] <= 10)
                    {
                        element = frequencyList[0] + element;
                        frequencyList.RemoveAt(0);
                        countList.RemoveAt(0);
                    }

                    else
                        break;

                }
                frequencyList.Reverse();
                frequencyList.Add(element + 0);
                frequencyList.Reverse();
                countList.Reverse();
                countList.Add(10);
                countList.Reverse();

                element = 0;
                int index = 0;
                index = countList.Count - 1;
                for (; ; index--)
                {
                    if (index < 0)
                        break;
                    if (countList[index] >= 16)
                    {
                        element = element + frequencyList[index];
                        countList.RemoveAt(index);
                        frequencyList.RemoveAt(index);
                    }
                    else
                        break;

                }
                frequencyList.Add(element + 0);
                countList.Add(16);

            }


            return frequencyList;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Longest_Run_in_a_Block_Test
{
    class ClassProcess
    {
        // This class 
        public static void MethodProcess(List<int> inputList, int N, int M)
        {
            int count = 0;                                          // This count will count the consequtive ones in a block 
            List<int> maxFrequencyList = new List<int>();           // this list will hold the max consecutive number of ones for each block 
            List<int> frequencyList = new List<int>();              // this list will hold all consequtive one frequencies for each block then record max to the maxFrequencyList


            for (int i = 0; i < N; i++)                             // This for calculate max run of ones for all blocks
            {
                for (int j = 0; j < M; j++)                         // This for loop calculates the all frequencies of ones in one . block. Then record them to the frequency list
                {
                    if (inputList[j + i * M] == 1)
                        count = count + 1;
                    else if ((count != 0) && (inputList[j + i * M] == 0))
                    {
                        frequencyList.Add(count);
                        count = 0;
                    }
                }
                if ((inputList[M + i * M - 1] == 1))      // it is the condition  that the last element of the each block is one (in this case according to the our code the lasr frequency of ones didnot recors, so we recording them)
                    frequencyList.Add(count);
                if (frequencyList.Count != 0)                           // This if else will record the maximum frequency of the 1 in on block to maxFrequencyList. As you now frequencyList hold all frequencies of 1 for one block only
                {
                    maxFrequencyList.Add(frequencyList.Max());
                    frequencyList.Clear();
                    count = 0;
                }
                else
                    maxFrequencyList.Add(0);                        // it is the condition if all values in a block 0 . Then them max frequency of 1  will be 0 
            }

            // Until now, we found all max frequencies of blocks and then record them maxFrequencyList

            List<int> frequencyListofMaxList = new List<int>();                             // The frequencies of elements in the max frequenciesList
            List<int> countList = new List<int>();
            frequencyListofMaxList = ClassProcess2.MethodProcess2(maxFrequencyList, M, countList);

            double pValue;
            pValue = ClassCalculateObs.MethodCalculateObs(frequencyListofMaxList, N, M);        // This class calculate X^2 Obs then P-Value. Return is P-VAlue. P-Value will help us to determine the sequence is random or not


            Console.WriteLine("P-Value is equal to   " + pValue);

            if (pValue >= 0.01)
            {
                Console.WriteLine("Since pValue is bigger than or equal to 0.01 , then the process is random");
            }
            else
                Console.WriteLine("Since pValue is smaller than 0.01 , then the process is not random");

            return;
        }
    }
}
